:HIDDEN:
#+CATEGORY: guix
#+PROPERTY: header-args :results silent
:END:
#+TITLE: Guix Configuration

Declaring packages to install on user profile

* Emacs
#+BEGIN_SRC scheme :tangle ./emacs.scm
(use-modules (gnu packages)
             (guix profiles)
             (ice-9 match)
             (ice-9 pretty-print)
             (guix git-download)
             (gnu packages emacs-xyz))

;;; HELPER PROCEDURES
;;; =================

(define (profile-manifest->package-names)
  "Return a list with the names of the packages installed in the user
   profile (see %user-profile-directory in the (guix profiles) module)."
  (map manifest-entry-name
       (manifest-entries (profile-manifest %user-profile-directory))))

;;; PACKAGES
;;; ========

(define packages
  (append (profile-manifest->package-names)
        (list "git")))

(define emacs-packages
  (append (profile-manifest->package-names)
          (list "emacs"
                "emacs-guix"
                "emacs-exwm"
                "emacs-xelb"
                "emacs-exwm-edit"
                "emacs-hydra"
                "emacs-transient"
                "emacs-howm"
                "emacs-emms"
                "emacs-circe"
                "emacs-pdf-tools"
                "emacs-elfeed"
                "emacs-elfeed-org"
                "emacs-dumb-jump"
                "emacs-json-mode"
                "emacs-web-beautify"
                "emacs-web-mode"
                "emacs-async"
                "emacs-dash"
                "emacs-f"
                "emacs-s"
                "emacs-ht"
                "emacs-a"
                "emacs-request"
                "emacs-exec-path-from-shell"
                "emacs-desktop-environment"
                "emacs-all-the-icons"
                "emacs-which-key"
                "emacs-discover-my-major"
                "emacs-helpful"
                "emacs-better-defaults"
                "emacs-visual-fill-column"
                "emacs-ace-window"
                "emacs-transpose-frame"
                "emacs-dired-hacks"
                "emacs-dired-rsync"
                "emacs-avy"
                "emacs-goto-chg"
                "emacs-expand-region"
                "emacs-smartparens"
                "emacs-edit-indirect"
                "emacs-flycheck"
                "emacs-wgrep"
                "emacs-anzu"
                "emacs-counsel-projectile"
                "emacs-ivy"
                "emacs-ivy-rich"
                "emacs-smex"
                "emacs-company"
                "emacs-company-quickhelp"
                "emacs-prescient"
                "emacs-crux"
                "emacs-keyfreq"
                "emacs-elmacro"
                "emacs-projectile"
                "emacs-ibuffer-projectile"
                "emacs-magit"
                "emacs-git-timemachine"
                "emacs-gitpatch"
                "emacs-org"
                "emacs-org-contrib"
                "emacs-org-pomodoro"
                "emacs-markdown-mode"
                "emacs-nov-el"
                "emacs-scratch-el"
                "emacs-yasnippet"
                "emacs-yasnippet-snippets"
                "emacs-auto-yasnippet"
                "emacs-htmlize"
                "emacs-base16-theme"
                )))



;;; MANIFEST
;;; ========
(packages->manifest (map specification->package packages))
(packages->manifest (map specification->package emacs-packages))



#+END_SRC

* Example Emacs Package
#+BEGIN_SRC scm :tangle ./emacs-material-theme.scm
(define-module (emacs material-theme)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix build-system emacs)
  #:use-module (guix packages)
  #:use-module (guix download))

(define-public emacs-material-theme
  (package
   (name "emacs-material-theme")
   (version "1.2")
   (source
    (origin
     (method url-fetch)
     (uri (string-append "https://stable.melpa.org/packages/material-theme-"
                         version ".tar"))
     (sha256
      (base32
       "1d621i6zm6bqghlzv0ijw5vdnskc6v08ypmcway7w0f7sb5sx9iz"))))
   (build-system emacs-build-system)
   (home-page
    "http://github.com/cpaulik/emacs-material-theme")
   (synopsis
    "A Theme based on the colors of the Google Material Design")
   (description
    "To use it, put the following in your Emacs configuration file: (load-theme
'material t).")
   (license license:expat)))

#+END_SRC
* org-cliplink
#+BEGIN_SRC scheme :tangle ./emacs-org-cliplink.scm
(define-module (emacs org-cliplink)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix build-system emacs)
  #:use-module (guix packages)
  #:use-module (guix download))

(define-public emacs-org-cliplink
  (package
   (name "emacs-org-cliplink")
   (version "20190608.2134")
   (source
    (origin
     (method url-fetch)
     (uri (string-append "https://melpa.org/packages/org-cliplink-"
                         version ".tar"))
     (sha256
      (base32
       "1d621i6zm6bqghlzv0ijw5vdnskc6v08ypmcway7w0f7sb5sx9iz"))))
   (build-system emacs-build-system)
   (home-page
   "https://github.com/rexim/org-cliplink/")
   (synopsis
    "insert org-mode links from the clipboard")
   (description
   "A simple command that takes a URL from the clipboard and inserts an
org-mode link with a title of a page found by the URL into the
current buffer")
   (license license:expat)))

#+END_SRC
* telephone-line
#+BEGIN_SRC scm :tangle ./emacs-telephone-line.scm
(define-module (emacs telephone-line)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix build-system emacs)
  #:use-module (guix packages)
  #:use-module (gnu packages emacs)
  #:use-module (guix download))

(define-public emacs-telephone-line
(package
  (name "emacs-telephone-line")
  (version "0.4")
  (source
    (origin
      (method url-fetch)
      (uri (string-append
             "https://stable.melpa.org/packages/telephone-line-"
             version
             ".tar"))
      (sha256
        (base32
          "13g79sljmaj0zx648ga3qxhhyzxshv6bqkf5c1043dm4sm7v37v5"))))
  (build-system emacs-build-system)
  (propagated-inputs
    `(("emacs-cl-generic" ,emacs-cl-generic)))
  (home-page
    "https://github.com/dbordak/telephone-line")
  (synopsis "Rewrite of Powerline")
  (description
    "Telephone Line is a library for customizing the mode-line that is
based on the Vim Powerline.  Themes can be created by customizing
the telephone-line-lhs and telephone-line-rhs variables.
")
  (license license:gpl3+))
    )
#+END_SRC

* Packages to build from source
#+BEGIN_SRC text
emacs-org-cliplink
emacs-org-download
emacs-org-journal
emacs-toc-org
emacs-ox-gfm
emacs-browse-kill-ring
emacs-persistent-scratch
emacs-unkillable-scratch
emacs-buffer-move
emacs-windmove
emacs-boon
emacs-objed
emacs-hyperbole
emacs-torus
 #+END_SRC
* emacs-melpa
#+BEGIN_SRC scheme
;; -*- mode: scheme; geiser-scheme-implementation: guile -*-
;; run this with "guix package -f" to install the emacs configuration

(use-modules (gnu packages emacs)
             (guix base32)
             (guix build-system emacs)
             (guix build-system trivial)
             (guix download)
             (guix hash)
             (guix http-client)
             (guix import elpa)
             (guix packages)
             (gnu packages)
             (guix store)
             (ice-9 match)
             (ice-9 pretty-print)
             (srfi srfi-26))

(define packages
  '(boon
    ;; other packages go here
    ))

(define (resolve-dependencies names cache)
  (filter (compose not (cut eq? <> #f) cadr)
          (map (lambda (name)
                 (list (elpa-name->package-name name)
                       (elpa-name->package name cache)))
               names)))

(define (elpa-package->package pkg pkg-cache)
  "Turn an elpa package into an actual package."
  (match pkg
    (($ <elpa-package> name version inputs synopsis kind home-page description source-url)
     (package
       (name (elpa-name->package-name name))
       (version version)
       (source (origin
                 (method url-fetch)
                 (uri source-url)
                 (sha256
                  (base32
                   (bytevector->nix-base32-string
                    (file-sha256
                     (with-store store
                       (download-to-store store source-url))))))))
       (build-system emacs-build-system)
       (propagated-inputs
        (resolve-dependencies
         (elpa-dependencies->names inputs)
         pkg-cache))
       (home-page home-page)
       (synopsis synopsis)
       (description description)
       (license #f)))))

(define (fetch-pkg name)
  (or (fetch-elpa-package name 'melpa)
      (fetch-elpa-package name 'melpa-stable)
      (fetch-elpa-package name 'gnu)))

(define (elpa-name->package name pkg-cache)
  (or (match (append (find-packages-by-name (elpa-name->package-name name))
                     ;; some things don't have "emacs-" prepended, for
                     ;; some reason (eg. magit)
                     (find-packages-by-name name))
        [(package . _) package]
        [_ #f])
      (hash-ref pkg-cache name #f)
      (let ((package (elpa-package->package (fetch-pkg name) pkg-cache)))
        (cond
         (package
           (hash-set! pkg-cache name package)
           package)
         ((emacs-standard-library? name)
          #f)
         (else
          (error "Can't download library: " name))))))

(let ((cache (make-hash-table))
      (dependencies (map symbol->string packages)))
  (package
    (name "emacs-configuration")
    (version "0.0.0")
    (source #f)
    (build-system trivial-build-system)
    (arguments `(#:builder (mkdir %output)))
    (propagated-inputs
     (resolve-dependencies dependencies cache))
    (synopsis "")
    (description "")
    (license #f)
    (home-page "")))
#+END_SRC
